var searchIndex = JSON.parse('{\
"multilab":{"doc":"98-008: Intro to the Rust Programming Language","t":"AADLLLLLLLMLLLLLLLLDLLLLLLLLLLLLLLL","n":["multimap","multiset","MultiMap","borrow","borrow_mut","default","fmt","from","get_values","get_values_mut","inner","insert","into","new","remove_key","remove_value","try_from","try_into","type_id","MultiSet","borrow","borrow_mut","contains","count","default","from","insert","into","is_empty","len","new","remove","try_from","try_into","type_id"],"q":[[0,"multilab"],[2,"multilab::multimap"],[19,"multilab::multiset"],[35,"core::cmp"],[36,"core::hash"],[37,"core::fmt"],[38,"core::fmt"],[39,"alloc::vec"],[40,"core::result"],[41,"core::any"]],"d":["This module contains a multimap type that associates keys …","This module contains a multiset type that can store …","A multimap that associates keys with multiple values.","","","","","Returns the argument unchanged.","Gets the values associated with a key, if any.","Gets a mutable reference to the values associated with a …","The internal <code>HashMap</code> storing the key-value associations.","Inserts a key-value pair into the <code>MultiMap</code>.","Calls <code>U::from(self)</code>.","Creates a new, empty <code>MultiMap</code>.","Removes all values associated with a key and returns them.","Removes a specific value from the values associated with a …","","","","A multiset that can store elements of type <code>K</code>.","","","Checks if a given value is in the <code>MultiSet</code>.","Counts the occurrences of <code>value</code>.","","Returns the argument unchanged.","Inserts an element.","Calls <code>U::from(self)</code>.","Checks if a <code>MultiSet</code> is empty.","Counts all the elements, including each duplicate.","Creates a new empty <code>MultiSet</code>.","Removes an element.","","",""],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],[[1,[-1,-2]]],[2,3],2],[[[1,[-1,-2]],4],5,[6,3,2],[6,2]],[-1,-1,[]],[[[1,[-1,-2]],-1],[[8,[[7,[-2]]]]],[3,2],2],[[[1,[-1,-2]],-1],[[8,[[9,[-2]]]]],[3,2],2],0,[[[1,[-1,-2]],-1,-2],10,[3,2],2],[-1,-2,[],[]],[[],[[1,[-1,-2]]],[3,2],2],[[[1,[-1,-2]],-1],[[8,[[9,[-2]]]]],[3,2],2],[[[1,[-1,-2]],-1,-2],11,[3,2],2],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[14,[-1]],-1],11,[2,3]],[[[14,[-1]],-1],15,[2,3]],[[],[[14,[-1]]],[2,3]],[-1,-1,[]],[[[14,[-1]],-1],10,[2,3]],[-1,-2,[],[]],[[[14,[-1]]],11,[2,3]],[[[14,[-1]]],15,[2,3]],[[],[[14,[-1]]],[2,3]],[[[14,[-1]],-1],11,[2,3]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]]],"c":[],"p":[[3,"MultiMap",2],[8,"Eq",35],[8,"Hash",36],[3,"Formatter",37],[6,"Result",37],[8,"Debug",37],[15,"slice"],[4,"Option",38],[3,"Vec",39],[15,"tuple"],[15,"bool"],[4,"Result",40],[3,"TypeId",41],[3,"MultiSet",19],[15,"usize"]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};

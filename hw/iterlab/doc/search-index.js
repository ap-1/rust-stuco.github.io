var searchIndex = new Map(JSON.parse('[\
["iterlab",{"doc":"98-008: Intro to the Rust Programming Language","t":"CCCCHHHHCCCCFNNNNNNNNNNNNNFNNNNNNNNNNNNNFNNNNNNNNNNNNNNFNNNNNNNNNNNNN","n":["hofs","iterators","fib_fun","sum_squares","read_the_docs","sum_fib_range","sum_of_squared_odd_numbers","sum_of_squared_odd_numbers_bad","cycle","double","fibonacci","interleave","Cycle","borrow","borrow_mut","clone","clone_into","from","into","into_iter","new","next","to_owned","try_from","try_into","type_id","Double","borrow","borrow_mut","clone","clone_into","from","into","into_iter","new","next","to_owned","try_from","try_into","type_id","Fibonacci","borrow","borrow_mut","clone","clone_into","default","from","into","into_iter","new","next","to_owned","try_from","try_into","type_id","Interleave","borrow","borrow_mut","clone","clone_into","from","into","into_iter","new","next","to_owned","try_from","try_into","type_id"],"q":[[0,"iterlab"],[2,"iterlab::hofs"],[4,"iterlab::hofs::fib_fun"],[6,"iterlab::hofs::sum_squares"],[8,"iterlab::iterators"],[12,"iterlab::iterators::cycle"],[26,"iterlab::iterators::double"],[40,"iterlab::iterators::fibonacci"],[55,"iterlab::iterators::interleave"],[69,"alloc::vec"],[70,"core::clone"],[71,"core::option"],[72,"core::iter::traits::iterator"],[73,"core::result"],[74,"core::any"]],"d":["This module contains some functions that require …","This module contains 4 iterators that you will implement!","A lot of documentation, if you choose to read it. Do this …","A quick exercise to get familiar with using iterators and …","For every <code>i</code>th number from <code>0..n</code>, find the sum of the first <code>i</code>","Find the sum of the range of fibonacci numbers defined by …","Make sure to read the documentation for …","Finds the sum of squared odd numbers, where the largest …","A cycling iterator! Do this <strong>second</strong>.","A doubled iterator! Do this <strong>fourth</strong>.","The Fibonacci sequence! Do this <strong>first</strong>.","An interleaved iterator! Do this <strong>third</strong>.","A struct that is intended to be an iterator that …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Creates a new <code>Cycle</code> iterator from the given iterator.","Advances the iterator and returns the next item in the …","","","","","Creates an iterator that doubles each element of an input …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Creates a new <code>Double</code> iterator from the given iterator.","Advances the iterator and returns the next doubled element.","","","","","Represents an iterator that generates the Fibonacci …","","","","","Implement a default implementation for <code>Fibonacci</code>, where …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Create a new <code>Fibonacci</code> struct starting with the given <code>start</code>…","Advances the iterator and returns the next Fibonacci …","","","","","Creates an iterator that interleaves elements from two …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Creates a new <code>Interleave</code> iterator from the given two …","Advances the iterator and returns the next interleaved …","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,0,10,10,10,10,10,10,10,10,10,10,10,10,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,12,12,12,12,12],"f":[0,0,0,0,[1,[[2,[1]]]],[[1,1],1],[1,1],[1,1],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[-1]]],[[3,[-1]]],[4,4]],[[-1,-2],5,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-1]]],4],[[[3,[-1]]],6,[4,7]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[10,[-1]]],[[10,[-1]]],4],[[-1,-2],5,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-1]]],[7,4]],[[[10,[-1]]],6,[7,4]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[11,11],[[-1,-2],5,[],[]],[[],11],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],11],[11,[[6,[-1]]],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[12,[-1,-2]]],[[12,[-1,-2]]],4,4],[[-1,-2],5,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[12,[-1,-2]]],7,[[7,[],[[13,[]]]]]],[[[12,[-1,-2]]],6,7,[[7,[],[[13,[]]]]]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]]],"c":[],"p":[[1,"usize"],[5,"Vec",69],[5,"Cycle",12],[10,"Clone",70],[1,"tuple"],[6,"Option",71],[10,"Iterator",72],[6,"Result",73],[5,"TypeId",74],[5,"Double",26],[5,"Fibonacci",40],[5,"Interleave",55],[17,"Item"]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);

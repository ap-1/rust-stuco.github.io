searchState.loadedDescShard("pokerlab", 0, "98-008: Intro to the Rust Programming Language\nThis module contains the definition and implementation of …\nModule for poker hand evaluation and comparison.\nThe Ace card, which often has special rules in many card …\nRepresents a standard playing card with a suit and a rank.\nThe Club suit, typically represented by a black ♣ symbol.\nThe Diamond suit, typically represented by a red ♦ …\nThe Heart suit, typically represented by a red ♥ symbol.\nThe Jack card, traditionally representing a royal servant …\nThe King card, traditionally representing a male royal …\nThe Queen card, traditionally representing a female royal …\nRepresents the rank of a playing card, which can be either …\nThe Spade suit, typically represented by a black ♠ …\nRepresents the four possible suits in a standard deck of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new Card instance from a Suit and Rank.\nReturns a reference to this card’s rank.\nReturns a reference to this card’s suit.\nRepresents five cards of the same suit. The suit of the …\nRepresents a hand containing four cards of the same rank …\nRepresents a hand containing three cards of one rank and …\nRepresents a standard <code>Hand</code> of 5 playing <code>Card</code>s.\nRepresents a high card hand, consisting of five unpaired …\nRepresents a hand containing one pair and three kickers.\nRepresents different poker hand rankings with their …\nRepresents five consecutive cards of different suits, …\nRepresents five consecutive cards of the same suit. The …\nRepresents a hand containing three cards of the same rank …\nRepresents a hand containing two pairs and one kicker.\nThe cards in the hand.\nThe higher ranked pair.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <code>Flush</code> if all cards in the hand have the same …\nReturns a <code>FourOfAKind</code> if the hand contains four cards of …\nReturns a <code>FullHouse</code> if the hand contains a triple and a …\nReturns a <code>OnePair</code> if the hand contains a pair of cards …\nReturns a <code>Straight</code> if the cards form a straight …\nReturns a <code>StraightFlush</code> if the hand contains consecutive …\nReturns a <code>ThreeOfAKind</code> if the hand contains three cards of …\nReturns a <code>TwoPair</code> if the hand contains two pairs, …\nThe highest card rank in the hand.\nThe highest rank in the straight (highest can be an Ace, …\nThe highest rank in the straight (highest can be an Ace, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe remaining unpaired card.\nThe remaining unpaired card rank.\nThe remaining four card ranks in descending order.\nThe remaining three card ranks in descending order.\nThe remaining two card ranks in descending order.\nCreates a new <code>Hand</code> of 5 <code>Card</code>s.\nThe rank of the matched pair of cards.\nThe rank of the two matched cards.\nThe rank shared by all four cards.\nThe ranks of the five cards in descending order.\nThe lower ranked pair.\nGiven 5 cards as input, creates a <code>PokerHand</code> with the …\nThe rank of the three matched cards.\nThe rank of the three matched cards.")